def calculate_physical_units():
    wdir = '/home/mvorster/PLUTO/Shock_turbulence/output/'

    # normalisation factors
    ISM_density = 1.0  # [particles per cm^3]
    ISM_sound_speed = 10.  # [km/s]
    ISM_size = 1.0  # [parsec]

    # AMUN: MHD code used to generate the turbulence field
    magnetic_field_AMUN = 0.1
    pressure_AMUN = 0.1
    density_AMUN = 1.
    sound_speed_AMUN = sqrt(pressure_AMUN/density_AMUN)
    Alfven_speed_AMUN = magnetic_field_AMUN/sqrt(4.*3.1416*density_AMUN)

    # PLUTO: MHD code used to calculate the MHD shock evolution
    pressure_PLUTO = 1.
    max_time_PLUTO = 0.1
    density_PLUTO = density_AMUN  # don't change for now
    sound_speed_PLUTO = sqrt(pressure_PLUTO/density_PLUTO)

    # the position of the shock at a given simulation time
    shock_position = 0.5
    simulation_time = 0.09

    # it is possible to rescale the velocity field generated by the AMUN
    # code when importing the data into PLUTO as an initial condition
    velocity_scaling_factor = sound_speed_PLUTO/sound_speed_AMUN
    Alfven_speed_PLUTO = Alfven_speed_AMUN*velocity_scaling_factor
    magnetic_field_PLUTO = Alfven_speed_PLUTO*sqrt(4.*3.1416*density_PLUTO)

    mass_proton = 1.6726231e-24  # [g]
    parsec = 3.086e18  # [cm]
    seconds_to_year = 60.*60.*24.*365.
    Gauss_to_microGauss = 1.0e6
    km_to_cm = 1.0e5

    # [g/cm^3]
    density_normalisation_factor = ISM_density*mass_proton
    # [cm/s]
    velocity_normalisation_factor = ISM_sound_speed*km_to_cm
    # [cm]
    length_normalisation_factor = ISM_size*parsec
    # [s]
    time_normalisation_factor = (
        length_normalisation_factor/velocity_normalisation_factor
    )
    # [Gauss]
    magnetic_field_normalisation_factor = sqrt(
        4.*3.1416*density_normalisation_factor*(
            velocity_normalisation_factor
        )**2
    )

    # [g/cm^3]
    density = density_PLUTO*density_normalisation_factor
    # [cm/s]
    sound_speed = sound_speed_PLUTO*velocity_normalisation_factor
    # [Gauss]
    magnetic_field = magnetic_field_PLUTO*magnetic_field_normalisation_factor
    # [s]
    time = max_time_PLUTO*time_normalisation_factor
    # [cm/s]
    shock_speed = (
        shock_position*length_normalisation_factor/(
            simulation_time*time_normalisation_factor
        )
    )
    Mach_number = shock_speed/sound_speed
    Alfven_speed = magnetic_field/sqrt(4.*3.1416*density)

    print('\n')
    print('Code units')
    print('==========')
    print('Density:                %1.1f' % density_PLUTO)
    print('Magnetic field:         %1.3f' % magnetic_field_PLUTO)
    print('Sound speed:            %1.1f' % sound_speed_PLUTO)
    print('Alfven speed:           %1.1f' % Alfven_speed_PLUTO)
    print('Simulation end time:    %1.1f' % max_time_PLUTO)
    print('\n')
    print('Physical units')
    print('==============')
    print('Density [particles/cm^3]:      %1.1f' % (density/mass_proton))
    print('Magnetic field [microGauss]:   %1.2f' % (
            magnetic_field*Gauss_to_microGauss
        )
    )
    print('Shock speed [km/s]:            %1.1f' % (shock_speed/km_to_cm))
    print('Sound speed [km/s]:            %1.1f' % (sound_speed/km_to_cm))
    print('Alfven speed [km/s]:           %1.1f' % (Alfven_speed/km_to_cm))
    print('Mach_number:                   %1.1f' % Mach_number)
    print('Simulation end time [year]:    %1.1f' % (time/seconds_to_year))
    print('\n')

    f = open(wdir + 'units.txt', 'w')
    f.write('AMUN code units\n')
    f.write('===============\n')
    f.write('Density:                %1.1f\n' % density_AMUN)
    f.write('Pressure:               %1.1f\n' % pressure_AMUN)
    f.write('Magnetic field:         %1.1f\n' % magnetic_field_AMUN)
    f.write('\n')
    f.write('PLUTO code units\n')
    f.write('================\n')
    f.write('Density:                %1.1f\n' % density_PLUTO)
    f.write('Pressure:               %1.1f\n' % pressure_PLUTO)
    f.write('Magnetic field:         %1.3f\n' % magnetic_field_PLUTO)
    f.write('Sound speed:            %1.1f\n' % sound_speed_PLUTO)
    f.write('Alfven speed:           %1.1f\n' % Alfven_speed_PLUTO)
    f.write('Simulation end time:    %1.1f\n' % max_time_PLUTO)
    f.write('\n')
    f.write('Normalisation units\n')
    f.write('===================\n')
    f.write('Density [particles/cm^3]       %1.1f\n' % ISM_density)
    f.write('Velocity [km/s]                %1.1f\n' % ISM_sound_speed)
    f.write('Length [parsec]                %1.1f\n' % ISM_size)
    f.write('Magnetic field [microGauss]    %1.1f\n' % (
        magnetic_field_normalisation_factor*Gauss_to_microGauss
    ))
    f.write('Time [year]                    %1.1f\n' % (
        time_normalisation_factor/seconds_to_year
    ))
    f.write('\n')
    f.write('Physical units\n')
    f.write('==============\n')
    f.write('Density [particles/cm^3]:      %1.1f\n' % (density/mass_proton))
    f.write('Magnetic field [microGauss]:   %1.2f\n' % (
        magnetic_field*Gauss_to_microGauss
    ))
    f.write('Shock speed [km/s]:            %1.1f\n' % (shock_speed/km_to_cm))
    f.write('Sound speed [km/s]:            %1.1f\n' % (sound_speed/km_to_cm))
    f.write('Alfven speed [km/s]:           %1.1f\n' % (Alfven_speed/km_to_cm))
    f.write('Mach_number:                   %1.1f\n' % Mach_number)
    f.write('Simulation end time [year]:    %1.1f\n' % (time/seconds_to_year))


if __name__ == "__main__":
    from numpy import sqrt

    physical_units = calculate_physical_units()
